const run = async () => {
    const client = new pg.Client(config);
    try {
      await client.connect();
      
      for (const schema of ['development', 'production']) {
        console.log(`Schema: ${schema}`);
        await client.query(`CREATE SCHEMA IF NOT EXISTS ${schema}`);
        await client.query(`SET search_path TO ${schema}`);
  
        await client.query(`
          CREATE TABLE IF NOT EXISTS venues (
            id integer GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
            venue character varying(100),
            location character varying(150),
            capacity text,
            cover_image text,
            contact text,
            notes text,
            parking text,
            accessibility text,
            owner text,
            rating text,
            created_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP,
            updated_at timestamp with time zone DEFAULT CURRENT_TIMESTAMP
          );
        `);
  
        await client.query(`
          CREATE TABLE IF NOT EXISTS users (
            id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            auth0_id character varying(255) NOT NULL UNIQUE,
            username character varying(255),
            avatar_url text,
            created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
            email text
          );
        `);
  
        await client.query(createVrcResults);
  
        await client.query(`
          CREATE TABLE IF NOT EXISTS shows (
            id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            event_link varchar(1000),
            flyer_image text,
            start timestamp without time zone,
            venue_id integer REFERENCES venues(id),
            bands varchar(1000),
            created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
            updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
            is_deleted boolean DEFAULT false,
            CONSTRAINT unique_show UNIQUE (venue_id, start)
          );
        `);
  
        await client.query(`
          CREATE TABLE IF NOT EXISTS bands (
            id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            band varchar(255) NOT NULL UNIQUE,
            social_links jsonb,
            show_id integer REFERENCES shows(id) ON DELETE CASCADE,
            genre text,
            contact text,
            open_to_requests boolean DEFAULT false,
            band_size text,
            claimed_by text REFERENCES users(auth0_id),
            claimed_at timestamp with time zone DEFAULT timezone('utc'::text, now())
          );
        `);
  
        await client.query(`
          CREATE TABLE IF NOT EXISTS tcupbands (
            id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            name text NOT NULL,
            social_links jsonb,
            genre text[],
            bandemail text,
            play_shows varchar(20),
            group_size text[] DEFAULT ARRAY[]::text[],
            created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
            music_links jsonb,
            profile_image text,
            other_images text[],
            location text,
            bio text,
            slug varchar(255) NOT NULL UNIQUE,
            claimed_by text REFERENCES users(auth0_id),
            claimed_at timestamp with time zone DEFAULT timezone('utc'::text, now())
          );
        `);
  
        await client.query(`
          CREATE TABLE IF NOT EXISTS band_images (
            id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            band_id integer REFERENCES tcupbands(id) ON DELETE CASCADE,
            image_path text NOT NULL,
            is_profile boolean DEFAULT false,
            created_at timestamp without time zone DEFAULT now()
          );
        `);
  
        await client.query(`
          CREATE UNIQUE INDEX IF NOT EXISTS unique_profile_image_per_band 
          ON band_images(band_id) WHERE is_profile = true;
        `);
  
        await client.query(`
          CREATE INDEX IF NOT EXISTS idx_bands_claimed_by ON bands(claimed_by);
          CREATE INDEX IF NOT EXISTS idx_shows_is_deleted ON shows(is_deleted);
          CREATE INDEX IF NOT EXISTS idx_tcupbands_claimed_by ON tcupbands(claimed_by);
        `);
      }
      console.log('Migration completed');
    } catch (error) {
      console.error('Migration failed:', error);
    } finally {
      await client.end();
    }
  };